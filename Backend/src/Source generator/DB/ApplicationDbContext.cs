//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using MySql.EntityFrameworkCore.Extensions;

namespace DkdCore.Domain.entities
{

    public partial class ApplicationDbContext : DbContext
    {

        public ApplicationDbContext() :
            base()
        {
            OnCreated();
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySQL(@"persistsecurityinfo=True;server=87.107.165.236;user id=root;password=M@hd!1395;database=raimond");
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<SysUserType> SysUserTypes
        {
            get;
            set;
        }

        public virtual DbSet<SysUser> SysUsers
        {
            get;
            set;
        }

        public virtual DbSet<SysRoleUserRelation> SysRoleUserRelations
        {
            get;
            set;
        }

        public virtual DbSet<SysRoleMenuRelation> SysRoleMenuRelations
        {
            get;
            set;
        }

        public virtual DbSet<SysRole> SysRoles
        {
            get;
            set;
        }

        public virtual DbSet<SysOrganization> SysOrganizations
        {
            get;
            set;
        }

        public virtual DbSet<SysMenu> SysMenus
        {
            get;
            set;
        }

        public virtual DbSet<SysEventtracker> SysEventtrackers
        {
            get;
            set;
        }

        public virtual DbSet<SysDictionaryData> SysDictionaryDatas
        {
            get;
            set;
        }

        public virtual DbSet<SysDictionary> SysDictionaries
        {
            get;
            set;
        }

        public virtual DbSet<SysConfig> SysConfigs
        {
            get;
            set;
        }

        public virtual DbSet<CursCourseObjectives> CursCourseObjectives
        {
            get;
            set;
        }

        public virtual DbSet<CurUsers> CurUsers
        {
            get;
            set;
        }

        public virtual DbSet<CurTeachingMethods> CurTeachingMethods
        {
            get;
            set;
        }

        public virtual DbSet<CurTeachers> CurTeachers
        {
            get;
            set;
        }

        public virtual DbSet<CurTeacherTypes> CurTeacherTypes
        {
            get;
            set;
        }

        public virtual DbSet<CurSpecializations> CurSpecializations
        {
            get;
            set;
        }

        public virtual DbSet<CurSchedules> CurSchedules
        {
            get;
            set;
        }

        public virtual DbSet<CurReligions> CurReligions
        {
            get;
            set;
        }

        public virtual DbSet<CurRelatedJobs> CurRelatedJobs
        {
            get;
            set;
        }

        public virtual DbSet<CurQuizzes> CurQuizzes
        {
            get;
            set;
        }

        public virtual DbSet<CurQuizSubmissions> CurQuizSubmissions
        {
            get;
            set;
        }

        public virtual DbSet<CurQuestions> CurQuestions
        {
            get;
            set;
        }

        public virtual DbSet<CurQuestionAnswers> CurQuestionAnswers
        {
            get;
            set;
        }

        public virtual DbSet<CurQualifications> CurQualifications
        {
            get;
            set;
        }

        public virtual DbSet<CurOrganizations> CurOrganizations
        {
            get;
            set;
        }

        public virtual DbSet<CurMaritalStatuses> CurMaritalStatuses
        {
            get;
            set;
        }

        public virtual DbSet<CurLrsLogs> CurLrsLogs
        {
            get;
            set;
        }

        public virtual DbSet<CurFieldsOfStudy> CurFieldsOfStudies
        {
            get;
            set;
        }

        public virtual DbSet<CurEnrollments> CurEnrollments
        {
            get;
            set;
        }

        public virtual DbSet<CurDenominations> CurDenominations
        {
            get;
            set;
        }

        public virtual DbSet<CurDegrees> CurDegrees
        {
            get;
            set;
        }

        public virtual DbSet<CurCourses> CurCourses
        {
            get;
            set;
        }

        public virtual DbSet<CurCourseTypes> CurCourseTypes
        {
            get;
            set;
        }

        public virtual DbSet<CurCourseStandards> CurCourseStandards
        {
            get;
            set;
        }

        public virtual DbSet<CurCourseContents> CurCourseContents
        {
            get;
            set;
        }

        public virtual DbSet<CurClasses> CurClasses
        {
            get;
            set;
        }

        public virtual DbSet<CurAttendances> CurAttendances
        {
            get;
            set;
        }

        public virtual DbSet<CurAssignments> CurAssignments
        {
            get;
            set;
        }

        public virtual DbSet<CurAssignmentSubmissions> CurAssignmentSubmissions
        {
            get;
            set;
        }

        public virtual DbSet<CurAnswers> CurAnswers
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration<SysUserType>(new SysUserTypeConfiguration());
            modelBuilder.ApplyConfiguration<SysUser>(new SysUserConfiguration());
            modelBuilder.ApplyConfiguration<SysRoleUserRelation>(new SysRoleUserRelationConfiguration());
            modelBuilder.ApplyConfiguration<SysRoleMenuRelation>(new SysRoleMenuRelationConfiguration());
            modelBuilder.ApplyConfiguration<SysRole>(new SysRoleConfiguration());
            modelBuilder.ApplyConfiguration<SysOrganization>(new SysOrganizationConfiguration());
            modelBuilder.ApplyConfiguration<SysMenu>(new SysMenuConfiguration());
            modelBuilder.ApplyConfiguration<SysEventtracker>(new SysEventtrackerConfiguration());
            modelBuilder.ApplyConfiguration<SysDictionaryData>(new SysDictionaryDataConfiguration());
            modelBuilder.ApplyConfiguration<SysDictionary>(new SysDictionaryConfiguration());
            modelBuilder.ApplyConfiguration<SysConfig>(new SysConfigConfiguration());
            modelBuilder.ApplyConfiguration<CursCourseObjectives>(new CursCourseObjectivesConfiguration());
            modelBuilder.ApplyConfiguration<CurUsers>(new CurUsersConfiguration());
            modelBuilder.ApplyConfiguration<CurTeachingMethods>(new CurTeachingMethodsConfiguration());
            modelBuilder.ApplyConfiguration<CurTeachers>(new CurTeachersConfiguration());
            modelBuilder.ApplyConfiguration<CurTeacherTypes>(new CurTeacherTypesConfiguration());
            modelBuilder.ApplyConfiguration<CurSpecializations>(new CurSpecializationsConfiguration());
            modelBuilder.ApplyConfiguration<CurSchedules>(new CurSchedulesConfiguration());
            modelBuilder.ApplyConfiguration<CurReligions>(new CurReligionsConfiguration());
            modelBuilder.ApplyConfiguration<CurRelatedJobs>(new CurRelatedJobsConfiguration());
            modelBuilder.ApplyConfiguration<CurQuizzes>(new CurQuizzesConfiguration());
            modelBuilder.ApplyConfiguration<CurQuizSubmissions>(new CurQuizSubmissionsConfiguration());
            modelBuilder.ApplyConfiguration<CurQuestions>(new CurQuestionsConfiguration());
            modelBuilder.ApplyConfiguration<CurQuestionAnswers>(new CurQuestionAnswersConfiguration());
            modelBuilder.ApplyConfiguration<CurQualifications>(new CurQualificationsConfiguration());
            modelBuilder.ApplyConfiguration<CurOrganizations>(new CurOrganizationsConfiguration());
            modelBuilder.ApplyConfiguration<CurMaritalStatuses>(new CurMaritalStatusesConfiguration());
            modelBuilder.ApplyConfiguration<CurLrsLogs>(new CurLrsLogsConfiguration());
            modelBuilder.ApplyConfiguration<CurFieldsOfStudy>(new CurFieldsOfStudyConfiguration());
            modelBuilder.ApplyConfiguration<CurEnrollments>(new CurEnrollmentsConfiguration());
            modelBuilder.ApplyConfiguration<CurDenominations>(new CurDenominationsConfiguration());
            modelBuilder.ApplyConfiguration<CurDegrees>(new CurDegreesConfiguration());
            modelBuilder.ApplyConfiguration<CurCourses>(new CurCoursesConfiguration());
            modelBuilder.ApplyConfiguration<CurCourseTypes>(new CurCourseTypesConfiguration());
            modelBuilder.ApplyConfiguration<CurCourseStandards>(new CurCourseStandardsConfiguration());
            modelBuilder.ApplyConfiguration<CurCourseContents>(new CurCourseContentsConfiguration());
            modelBuilder.ApplyConfiguration<CurClasses>(new CurClassesConfiguration());
            modelBuilder.ApplyConfiguration<CurAttendances>(new CurAttendancesConfiguration());
            modelBuilder.ApplyConfiguration<CurAssignments>(new CurAssignmentsConfiguration());
            modelBuilder.ApplyConfiguration<CurAssignmentSubmissions>(new CurAssignmentSubmissionsConfiguration());
            modelBuilder.ApplyConfiguration<CurAnswers>(new CurAnswersConfiguration());
            CustomizeMapping(ref modelBuilder);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
