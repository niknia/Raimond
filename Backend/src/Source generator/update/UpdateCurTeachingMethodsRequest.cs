//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateCurTeachingMethodsRequest : IRequest<Int64>
    {

        #region Properties

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public string MethodName { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        #endregion
    }
    public class UpdateCurTeachingMethodsRequestValidator : CustomValidator<UpdateCurTeachingMethodsRequest>
    {
       public UpdateCurTeachingMethodsRequestValidator(IReadRepository<CurTeachingMethods> repository, IStringLocalizer<UpdateCurTeachingMethodsRequestValidator> localizer){}
    }
    public class UpdateCurTeachingMethodsRequestHandler : IRequestHandler<UpdateCurTeachingMethodsRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<CurTeachingMethods> _repository;
    private readonly IStringLocalizer<UpdateCurTeachingMethodsRequestHandler> _localizer;

    public UpdateCurTeachingMethodsRequestHandler(IRepositoryWithEvents<CurTeachingMethods> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateCurTeachingMethodsRequest request, CancellationToken cancellationToken)
    {
        var curTeachingMethods = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = curTeachingMethods ?? throw new NotFoundException(string.Format(_localizer["curTeachingMethods.notfound"], request.Id));

        curTeachingMethods.Update(request.Createby,request.Createtime,request.Id,request.Isdeleted,request.MethodName,request.Modifyby,request.Modifytime);

        await _repository.UpdateAsync(curTeachingMethods, cancellationToken);

        return request.Id;
    }
   }

}
