//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateCurUsersRequest : IRequest<Int64>
    {

        #region Properties

        public long Createby { get; set; }

        public System.DateTime? CreatedAt { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Email { get; set; }

        public string EmployeeNumber { get; set; }

        public string FullName { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public string NationalCode { get; set; }

        public long? OrganizationId { get; set; }

        public string Phone { get; set; }

        public string Role { get; set; }

        public string Status { get; set; }

        public System.DateTime? UpdatedAt { get; set; }

        #endregion
    }
    public class UpdateCurUsersRequestValidator : CustomValidator<UpdateCurUsersRequest>
    {
       public UpdateCurUsersRequestValidator(IReadRepository<CurUsers> repository, IStringLocalizer<UpdateCurUsersRequestValidator> localizer){}
    }
    public class UpdateCurUsersRequestHandler : IRequestHandler<UpdateCurUsersRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<CurUsers> _repository;
    private readonly IStringLocalizer<UpdateCurUsersRequestHandler> _localizer;

    public UpdateCurUsersRequestHandler(IRepositoryWithEvents<CurUsers> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateCurUsersRequest request, CancellationToken cancellationToken)
    {
        var curUsers = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = curUsers ?? throw new NotFoundException(string.Format(_localizer["curUsers.notfound"], request.Id));

        curUsers.Update(request.Createby,request.CreatedAt,request.Createtime,request.Email,request.EmployeeNumber,request.FullName,request.Id,request.Isdeleted,request.Modifyby,request.Modifytime,request.NationalCode,request.OrganizationId,request.Phone,request.Role,request.Status,request.UpdatedAt);

        await _repository.UpdateAsync(curUsers, cancellationToken);

        return request.Id;
    }
   }

}
