//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateCurRelatedJobsRequest : IRequest<Int64>
    {

        #region Properties

        public int? CourseId { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public bool Isdeleted { get; set; }

        public long JobId { get; set; }

        public string JobTitle { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        #endregion
    }
    public class UpdateCurRelatedJobsRequestValidator : CustomValidator<UpdateCurRelatedJobsRequest>
    {
       public UpdateCurRelatedJobsRequestValidator(IReadRepository<CurRelatedJobs> repository, IStringLocalizer<UpdateCurRelatedJobsRequestValidator> localizer){}
    }
    public class UpdateCurRelatedJobsRequestHandler : IRequestHandler<UpdateCurRelatedJobsRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<CurRelatedJobs> _repository;
    private readonly IStringLocalizer<UpdateCurRelatedJobsRequestHandler> _localizer;

    public UpdateCurRelatedJobsRequestHandler(IRepositoryWithEvents<CurRelatedJobs> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateCurRelatedJobsRequest request, CancellationToken cancellationToken)
    {
        var curRelatedJobs = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = curRelatedJobs ?? throw new NotFoundException(string.Format(_localizer["curRelatedJobs.notfound"], request.Id));

        curRelatedJobs.Update(request.CourseId,request.Createby,request.Createtime,request.Isdeleted,request.JobId,request.JobTitle,request.Modifyby,request.Modifytime);

        await _repository.UpdateAsync(curRelatedJobs, cancellationToken);

        return request.Id;
    }
   }

}
