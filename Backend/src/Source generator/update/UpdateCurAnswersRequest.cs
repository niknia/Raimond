//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateCurAnswersRequest : IRequest<Int64>
    {

        #region Properties

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public long Id { get; set; }

        public bool? IsCorrect { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public long QuestionId { get; set; }

        public string Text { get; set; }

        #endregion
    }
    public class UpdateCurAnswersRequestValidator : CustomValidator<UpdateCurAnswersRequest>
    {
       public UpdateCurAnswersRequestValidator(IReadRepository<CurAnswers> repository, IStringLocalizer<UpdateCurAnswersRequestValidator> localizer){}
    }
    public class UpdateCurAnswersRequestHandler : IRequestHandler<UpdateCurAnswersRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<CurAnswers> _repository;
    private readonly IStringLocalizer<UpdateCurAnswersRequestHandler> _localizer;

    public UpdateCurAnswersRequestHandler(IRepositoryWithEvents<CurAnswers> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateCurAnswersRequest request, CancellationToken cancellationToken)
    {
        var curAnswers = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = curAnswers ?? throw new NotFoundException(string.Format(_localizer["curAnswers.notfound"], request.Id));

        curAnswers.Update(request.Createby,request.Createtime,request.Id,request.IsCorrect,request.Isdeleted,request.Modifyby,request.Modifytime,request.QuestionId,request.Text);

        await _repository.UpdateAsync(curAnswers, cancellationToken);

        return request.Id;
    }
   }

}
