//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateCurLrsLogsRequest : IRequest<Int64>
    {

        #region Properties

        public string Context { get; set; }

        public long? CourseId { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public string Object { get; set; }

        public string Result { get; set; }

        public string StatementId { get; set; }

        public System.DateTime? Timestamp { get; set; }

        public long UserId { get; set; }

        public string Verb { get; set; }

        #endregion
    }
    public class UpdateCurLrsLogsRequestValidator : CustomValidator<UpdateCurLrsLogsRequest>
    {
       public UpdateCurLrsLogsRequestValidator(IReadRepository<CurLrsLogs> repository, IStringLocalizer<UpdateCurLrsLogsRequestValidator> localizer){}
    }
    public class UpdateCurLrsLogsRequestHandler : IRequestHandler<UpdateCurLrsLogsRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<CurLrsLogs> _repository;
    private readonly IStringLocalizer<UpdateCurLrsLogsRequestHandler> _localizer;

    public UpdateCurLrsLogsRequestHandler(IRepositoryWithEvents<CurLrsLogs> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateCurLrsLogsRequest request, CancellationToken cancellationToken)
    {
        var curLrsLogs = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = curLrsLogs ?? throw new NotFoundException(string.Format(_localizer["curLrsLogs.notfound"], request.Id));

        curLrsLogs.Update(request.Context,request.CourseId,request.Createby,request.Createtime,request.Id,request.Isdeleted,request.Modifyby,request.Modifytime,request.Object,request.Result,request.StatementId,request.Timestamp,request.UserId,request.Verb);

        await _repository.UpdateAsync(curLrsLogs, cancellationToken);

        return request.Id;
    }
   }

}
