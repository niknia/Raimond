//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateSysDictionaryRequest : IRequest<Int64>
    {

        #region Properties

        public string Code { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public long Id { get; set; }

        public long Modifyby { get; set; }

        public System.DateTime Modifytime { get; set; }

        public string Name { get; set; }

        public string Remark { get; set; }

        public bool Status { get; set; }

        #endregion
    }
    public class UpdateSysDictionaryRequestValidator : CustomValidator<UpdateSysDictionaryRequest>
    {
       public UpdateSysDictionaryRequestValidator(IReadRepository<SysDictionary> repository, IStringLocalizer<UpdateSysDictionaryRequestValidator> localizer){}
    }
    public class UpdateSysDictionaryRequestHandler : IRequestHandler<UpdateSysDictionaryRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<SysDictionary> _repository;
    private readonly IStringLocalizer<UpdateSysDictionaryRequestHandler> _localizer;

    public UpdateSysDictionaryRequestHandler(IRepositoryWithEvents<SysDictionary> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateSysDictionaryRequest request, CancellationToken cancellationToken)
    {
        var sysDictionary = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = sysDictionary ?? throw new NotFoundException(string.Format(_localizer["sysDictionary.notfound"], request.Id));

        sysDictionary.Update(request.Code,request.Createby,request.Createtime,request.Id,request.Modifyby,request.Modifytime,request.Name,request.Remark,request.Status);

        await _repository.UpdateAsync(sysDictionary, cancellationToken);

        return request.Id;
    }
   }

}
