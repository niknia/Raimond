//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateCurCoursesRequest : IRequest<Int64>
    {

        #region Properties

        public string Code { get; set; }

        public long? CourseTypeId { get; set; }

        public long Createby { get; set; }

        public System.DateTime? CreatedAt { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Description { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public int? PracticalHours { get; set; }

        public string Proposal { get; set; }

        public long? QualificationId { get; set; }

        public long? SpecializationId { get; set; }

        public long? TeachingMethodId { get; set; }

        public int? TheoreticalHours { get; set; }

        public string Title { get; set; }

        #endregion
    }
    public class UpdateCurCoursesRequestValidator : CustomValidator<UpdateCurCoursesRequest>
    {
       public UpdateCurCoursesRequestValidator(IReadRepository<CurCourses> repository, IStringLocalizer<UpdateCurCoursesRequestValidator> localizer){}
    }
    public class UpdateCurCoursesRequestHandler : IRequestHandler<UpdateCurCoursesRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<CurCourses> _repository;
    private readonly IStringLocalizer<UpdateCurCoursesRequestHandler> _localizer;

    public UpdateCurCoursesRequestHandler(IRepositoryWithEvents<CurCourses> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateCurCoursesRequest request, CancellationToken cancellationToken)
    {
        var curCourses = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = curCourses ?? throw new NotFoundException(string.Format(_localizer["curCourses.notfound"], request.Id));

        curCourses.Update(request.Code,request.CourseTypeId,request.Createby,request.CreatedAt,request.Createtime,request.Description,request.Id,request.Isdeleted,request.Modifyby,request.Modifytime,request.PracticalHours,request.Proposal,request.QualificationId,request.SpecializationId,request.TeachingMethodId,request.TheoreticalHours,request.Title);

        await _repository.UpdateAsync(curCourses, cancellationToken);

        return request.Id;
    }
   }

}
