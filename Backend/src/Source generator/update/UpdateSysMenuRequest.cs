//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateSysMenuRequest : IRequest<Int64>
    {

        #region Properties

        public bool Alwaysshow { get; set; }

        public string Component { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Icon { get; set; }

        public long Id { get; set; }

        public bool Keepalive { get; set; }

        public long Modifyby { get; set; }

        public System.DateTime Modifytime { get; set; }

        public string Name { get; set; }

        public int Ordinal { get; set; }

        public string Params { get; set; }

        public long Parentid { get; set; }

        public string Parentids { get; set; }

        public string Perm { get; set; }

        public string Redirect { get; set; }

        public string Routename { get; set; }

        public string Routepath { get; set; }

        public string Type { get; set; }

        public bool Visible { get; set; }

        #endregion
    }
    public class UpdateSysMenuRequestValidator : CustomValidator<UpdateSysMenuRequest>
    {
       public UpdateSysMenuRequestValidator(IReadRepository<SysMenu> repository, IStringLocalizer<UpdateSysMenuRequestValidator> localizer){}
    }
    public class UpdateSysMenuRequestHandler : IRequestHandler<UpdateSysMenuRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<SysMenu> _repository;
    private readonly IStringLocalizer<UpdateSysMenuRequestHandler> _localizer;

    public UpdateSysMenuRequestHandler(IRepositoryWithEvents<SysMenu> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateSysMenuRequest request, CancellationToken cancellationToken)
    {
        var sysMenu = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = sysMenu ?? throw new NotFoundException(string.Format(_localizer["sysMenu.notfound"], request.Id));

        sysMenu.Update(request.Alwaysshow,request.Component,request.Createby,request.Createtime,request.Icon,request.Id,request.Keepalive,request.Modifyby,request.Modifytime,request.Name,request.Ordinal,request.Params,request.Parentid,request.Parentids,request.Perm,request.Redirect,request.Routename,request.Routepath,request.Type,request.Visible);

        await _repository.UpdateAsync(sysMenu, cancellationToken);

        return request.Id;
    }
   }

}
