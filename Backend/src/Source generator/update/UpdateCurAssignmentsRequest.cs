//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.update
{

    public class UpdateCurAssignmentsRequest : IRequest<Int64>
    {

        #region Properties

        public long ClassId { get; set; }

        public long Createby { get; set; }

        public System.DateTime? CreatedAt { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Description { get; set; }

        public System.DateTime? DueDate { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public int? MaxScore { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public string Title { get; set; }

        #endregion
    }
    public class UpdateCurAssignmentsRequestValidator : CustomValidator<UpdateCurAssignmentsRequest>
    {
       public UpdateCurAssignmentsRequestValidator(IReadRepository<CurAssignments> repository, IStringLocalizer<UpdateCurAssignmentsRequestValidator> localizer){}
    }
    public class UpdateCurAssignmentsRequestHandler : IRequestHandler<UpdateCurAssignmentsRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<CurAssignments> _repository;
    private readonly IStringLocalizer<UpdateCurAssignmentsRequestHandler> _localizer;

    public UpdateCurAssignmentsRequestHandler(IRepositoryWithEvents<CurAssignments> repository, IStringLocalizer<UpdateBrandRequestHandler> localizer) => (_repository, _localizer) = (repository, localizer);

    public async Task<Int64> Handle(UpdateCurAssignmentsRequest request, CancellationToken cancellationToken)
    {
        var curAssignments = await _repository.GetByIdAsync(request.Id, cancellationToken);

        _ = curAssignments ?? throw new NotFoundException(string.Format(_localizer["curAssignments.notfound"], request.Id));

        curAssignments.Update(request.ClassId,request.Createby,request.CreatedAt,request.Createtime,request.Description,request.DueDate,request.Id,request.Isdeleted,request.MaxScore,request.Modifyby,request.Modifytime,request.Title);

        await _repository.UpdateAsync(curAssignments, cancellationToken);

        return request.Id;
    }
   }

}
