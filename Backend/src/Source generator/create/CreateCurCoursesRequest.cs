//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.create
{

    public class CreateCurCoursesRequest : IRequest<Int64>
    {

        #region Properties

        public string Code { get; set; }

        public long? CourseTypeId { get; set; }

        public long Createby { get; set; }

        public System.DateTime? CreatedAt { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Description { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public int? PracticalHours { get; set; }

        public string Proposal { get; set; }

        public long? QualificationId { get; set; }

        public long? SpecializationId { get; set; }

        public long? TeachingMethodId { get; set; }

        public int? TheoreticalHours { get; set; }

        public string Title { get; set; }

        #endregion
    }
    public class CreateCurCoursesRequestValidator : CustomValidator<CreateCurCoursesRequest>
    {
       public CreateCurCoursesRequestValidator(IReadRepository<CurCourses> repository, IStringLocalizer<CreateCurCoursesRequestValidator> localizer){}
    }
    public class CreateCurCoursesRequestHandler : IRequestHandler<CreateCurCoursesRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<Brand> _repository;

    public CreateCurCoursesRequestHandler(IRepositoryWithEvents<CurCourses> repository) => _repository = repository;

    public async Task<Int64> Handle(CreateCurCoursesRequest request, CancellationToken cancellationToken)
    {
        var curCourses = new CurCourses(Code,CourseTypeId,Createby,CreatedAt,Createtime,Description,Isdeleted,Modifyby,Modifytime,PracticalHours,Proposal,QualificationId,SpecializationId,TeachingMethodId,TheoreticalHours,Title)

        await _repository.AddAsync(curCourses, cancellationToken);

        return CurCourses.Id;
    }
   }

}
