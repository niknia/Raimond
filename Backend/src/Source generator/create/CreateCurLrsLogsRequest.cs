//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.create
{

    public class CreateCurLrsLogsRequest : IRequest<Int64>
    {

        #region Properties

        public string Context { get; set; }

        public long? CourseId { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public string Object { get; set; }

        public string Result { get; set; }

        public string StatementId { get; set; }

        public System.DateTime? Timestamp { get; set; }

        public long UserId { get; set; }

        public string Verb { get; set; }

        #endregion
    }
    public class CreateCurLrsLogsRequestValidator : CustomValidator<CreateCurLrsLogsRequest>
    {
       public CreateCurLrsLogsRequestValidator(IReadRepository<CurLrsLogs> repository, IStringLocalizer<CreateCurLrsLogsRequestValidator> localizer){}
    }
    public class CreateCurLrsLogsRequestHandler : IRequestHandler<CreateCurLrsLogsRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<Brand> _repository;

    public CreateCurLrsLogsRequestHandler(IRepositoryWithEvents<CurLrsLogs> repository) => _repository = repository;

    public async Task<Int64> Handle(CreateCurLrsLogsRequest request, CancellationToken cancellationToken)
    {
        var curLrsLogs = new CurLrsLogs(Context,CourseId,Createby,Createtime,Isdeleted,Modifyby,Modifytime,Object,Result,StatementId,Timestamp,UserId,Verb)

        await _repository.AddAsync(curLrsLogs, cancellationToken);

        return CurLrsLogs.Id;
    }
   }

}
