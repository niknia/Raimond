//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.create
{

    public class CreateCurUsersRequest : IRequest<Int64>
    {

        #region Properties

        public long Createby { get; set; }

        public System.DateTime? CreatedAt { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Email { get; set; }

        public string EmployeeNumber { get; set; }

        public string FullName { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public string NationalCode { get; set; }

        public long? OrganizationId { get; set; }

        public string Phone { get; set; }

        public string Role { get; set; }

        public string Status { get; set; }

        public System.DateTime? UpdatedAt { get; set; }

        #endregion
    }
    public class CreateCurUsersRequestValidator : CustomValidator<CreateCurUsersRequest>
    {
       public CreateCurUsersRequestValidator(IReadRepository<CurUsers> repository, IStringLocalizer<CreateCurUsersRequestValidator> localizer){}
    }
    public class CreateCurUsersRequestHandler : IRequestHandler<CreateCurUsersRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<Brand> _repository;

    public CreateCurUsersRequestHandler(IRepositoryWithEvents<CurUsers> repository) => _repository = repository;

    public async Task<Int64> Handle(CreateCurUsersRequest request, CancellationToken cancellationToken)
    {
        var curUsers = new CurUsers(Createby,CreatedAt,Createtime,Email,EmployeeNumber,FullName,Isdeleted,Modifyby,Modifytime,NationalCode,OrganizationId,Phone,Role,Status,UpdatedAt)

        await _repository.AddAsync(curUsers, cancellationToken);

        return CurUsers.Id;
    }
   }

}
