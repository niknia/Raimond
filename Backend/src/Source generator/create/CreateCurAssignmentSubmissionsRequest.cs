//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.create
{

    public class CreateCurAssignmentSubmissionsRequest : IRequest<Int64>
    {

        #region Properties

        public long AssignmentId { get; set; }

        public string Comment { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public string FileUrl { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public System.DateTime? ReviewedAt { get; set; }

        public long? ReviewedBy { get; set; }

        public decimal? Score { get; set; }

        public long StudentId { get; set; }

        public System.DateTime? SubmittedAt { get; set; }

        #endregion
    }
    public class CreateCurAssignmentSubmissionsRequestValidator : CustomValidator<CreateCurAssignmentSubmissionsRequest>
    {
       public CreateCurAssignmentSubmissionsRequestValidator(IReadRepository<CurAssignmentSubmissions> repository, IStringLocalizer<CreateCurAssignmentSubmissionsRequestValidator> localizer){}
    }
    public class CreateCurAssignmentSubmissionsRequestHandler : IRequestHandler<CreateCurAssignmentSubmissionsRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<Brand> _repository;

    public CreateCurAssignmentSubmissionsRequestHandler(IRepositoryWithEvents<CurAssignmentSubmissions> repository) => _repository = repository;

    public async Task<Int64> Handle(CreateCurAssignmentSubmissionsRequest request, CancellationToken cancellationToken)
    {
        var curAssignmentSubmissions = new CurAssignmentSubmissions(AssignmentId,Comment,Createby,Createtime,FileUrl,Isdeleted,Modifyby,Modifytime,ReviewedAt,ReviewedBy,Score,StudentId,SubmittedAt)

        await _repository.AddAsync(curAssignmentSubmissions, cancellationToken);

        return CurAssignmentSubmissions.Id;
    }
   }

}
