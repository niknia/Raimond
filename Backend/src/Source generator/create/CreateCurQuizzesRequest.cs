//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.create
{

    public class CreateCurQuizzesRequest : IRequest<Int64>
    {

        #region Properties

        public long ClassId { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Description { get; set; }

        public int? DurationMinutes { get; set; }

        public System.DateTime? EndTime { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public System.DateTime? StartTime { get; set; }

        public string Title { get; set; }

        public int? TotalScore { get; set; }

        #endregion
    }
    public class CreateCurQuizzesRequestValidator : CustomValidator<CreateCurQuizzesRequest>
    {
       public CreateCurQuizzesRequestValidator(IReadRepository<CurQuizzes> repository, IStringLocalizer<CreateCurQuizzesRequestValidator> localizer){}
    }
    public class CreateCurQuizzesRequestHandler : IRequestHandler<CreateCurQuizzesRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<Brand> _repository;

    public CreateCurQuizzesRequestHandler(IRepositoryWithEvents<CurQuizzes> repository) => _repository = repository;

    public async Task<Int64> Handle(CreateCurQuizzesRequest request, CancellationToken cancellationToken)
    {
        var curQuizzes = new CurQuizzes(ClassId,Createby,Createtime,Description,DurationMinutes,EndTime,Isdeleted,Modifyby,Modifytime,StartTime,Title,TotalScore)

        await _repository.AddAsync(curQuizzes, cancellationToken);

        return CurQuizzes.Id;
    }
   }

}
