//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.create
{

    public class CreateSysMenuRequest : IRequest<Int64>
    {

        #region Properties

        public bool Alwaysshow { get; set; }

        public string Component { get; set; }

        public long Createby { get; set; }

        public System.DateTime Createtime { get; set; }

        public string Icon { get; set; }

        public long Id { get; set; }

        public bool Keepalive { get; set; }

        public long Modifyby { get; set; }

        public System.DateTime Modifytime { get; set; }

        public string Name { get; set; }

        public int Ordinal { get; set; }

        public string Params { get; set; }

        public long Parentid { get; set; }

        public string Parentids { get; set; }

        public string Perm { get; set; }

        public string Redirect { get; set; }

        public string Routename { get; set; }

        public string Routepath { get; set; }

        public string Type { get; set; }

        public bool Visible { get; set; }

        #endregion
    }
    public class CreateSysMenuRequestValidator : CustomValidator<CreateSysMenuRequest>
    {
       public CreateSysMenuRequestValidator(IReadRepository<SysMenu> repository, IStringLocalizer<CreateSysMenuRequestValidator> localizer){}
    }
    public class CreateSysMenuRequestHandler : IRequestHandler<CreateSysMenuRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<Brand> _repository;

    public CreateSysMenuRequestHandler(IRepositoryWithEvents<SysMenu> repository) => _repository = repository;

    public async Task<Int64> Handle(CreateSysMenuRequest request, CancellationToken cancellationToken)
    {
        var sysMenu = new SysMenu(Alwaysshow,Component,Createby,Createtime,Icon,Keepalive,Modifyby,Modifytime,Name,Ordinal,Params,Parentid,Parentids,Perm,Redirect,Routename,Routepath,Type,Visible)

        await _repository.AddAsync(sysMenu, cancellationToken);

        return SysMenu.Id;
    }
   }

}
