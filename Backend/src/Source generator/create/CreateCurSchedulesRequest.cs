//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 8/3/2025 12:38:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Newtonsoft.Json;

namespace Dkd.App.Admin.Application.create
{

    public class CreateCurSchedulesRequest : IRequest<Int64>
    {

        #region Properties

        public long ClassId { get; set; }

        public long Createby { get; set; }

        public System.DateTime? CreatedAt { get; set; }

        public System.DateTime Createtime { get; set; }

        public System.TimeSpan EndTime { get; set; }

        public long Id { get; set; }

        public bool Isdeleted { get; set; }

        public string Location { get; set; }

        public long? Modifyby { get; set; }

        public System.DateTime? Modifytime { get; set; }

        public System.TimeSpan StartTime { get; set; }

        public System.DateTime? UpdatedAt { get; set; }

        public string Weekday { get; set; }

        #endregion
    }
    public class CreateCurSchedulesRequestValidator : CustomValidator<CreateCurSchedulesRequest>
    {
       public CreateCurSchedulesRequestValidator(IReadRepository<CurSchedules> repository, IStringLocalizer<CreateCurSchedulesRequestValidator> localizer){}
    }
    public class CreateCurSchedulesRequestHandler : IRequestHandler<CreateCurSchedulesRequest, Int64>
    {
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<Brand> _repository;

    public CreateCurSchedulesRequestHandler(IRepositoryWithEvents<CurSchedules> repository) => _repository = repository;

    public async Task<Int64> Handle(CreateCurSchedulesRequest request, CancellationToken cancellationToken)
    {
        var curSchedules = new CurSchedules(ClassId,Createby,CreatedAt,Createtime,EndTime,Isdeleted,Location,Modifyby,Modifytime,StartTime,UpdatedAt,Weekday)

        await _repository.AddAsync(curSchedules, cancellationToken);

        return CurSchedules.Id;
    }
   }

}
